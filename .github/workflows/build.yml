name: Build LLVM/Clang Toolchain

on:
  push:
    branches: [ main ]
    tags: [ '*' ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build python3 python3-pip git
        sudo apt-get install -y build-essential libstdc++-12-dev zlib1g-dev
        # Optional for robustness across LLVM versions
        sudo apt-get install -y libxml2-dev libzstd-dev

    - name: Determine LLVM version
      id: llvm_version
      run: |
        DEFAULT_VERSION="llvmorg-19.1.6"
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          TAG_NAME="${{ github.ref_name }}"
          if git ls-remote --tags https://github.com/llvm/llvm-project.git | grep -q "refs/tags/$TAG_NAME$"; then
            echo "Using LLVM tag: $TAG_NAME"
            echo "LLVM_VERSION=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_NAME not found in LLVM repo, falling back to default: $DEFAULT_VERSION"
            echo "LLVM_VERSION=$DEFAULT_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          LATEST_VERSION=$(git ls-remote --tags https://github.com/llvm/llvm-project.git | \
                           grep -o 'refs/tags/llvmorg-[0-9]\+\.[0-9]\+\.[0-9]\+$' | \
                           sort -V | tail -n 1 | sed 's|refs/tags/||')
          if [ -z "$LATEST_VERSION" ]; then
            echo "No stable LLVM version found, using default: $DEFAULT_VERSION"
            echo "LLVM_VERSION=$DEFAULT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Using latest stable LLVM version: $LATEST_VERSION"
            echo "LLVM_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Download LLVM source
      run: |
        git clone --depth 1 --branch ${{ steps.llvm_version.outputs.LLVM_VERSION }} \
          https://github.com/llvm/llvm-project.git
        if [ ! -d llvm-project ]; then
          echo "Failed to clone LLVM repository"
          exit 1
        fi
        cd llvm-project

    - name: Configure LLVM build with CMake
      run: |
        cd llvm-project
        mkdir build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=../install \
          -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" \
          -DLLVM_TARGETS_TO_BUILD="X86;AArch64;RISCV" \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_USE_LINKER=lld \
          -DLLVM_PARALLEL_LINK_JOBS=1 \
          -DLLVM_PARALLEL_COMPILE_JOBS=4 \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          ../llvm

    - name: Build LLVM/Clang
      run: |
        cd llvm-project/build
        ninja -j$(nproc)

    - name: Install and package toolchain
      run: |
        cd llvm-project
        cd build
        ninja install
        cd ../install
        tar -czf clang-toolchain-${{ steps.llvm_version.outputs.LLVM_VERSION }}.tar.gz bin/

    - name: Upload build artifacts (for testing)
      uses: actions/upload-artifact@v4
      with:
        name: clang-toolchain-${{ github.sha }}
        path: llvm-project/install/clang-toolchain-${{ steps.llvm_version.outputs.LLVM_VERSION }}.tar.gz
        retention-days: 30

    - name: Delete existing release (if tag exists)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_NAME="${{ github.ref_name }}"
        RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases | \
          jq -r ".[] | select(.tag_name == \"$RELEASE_NAME\") | .id")
        if [ ! -z "$RELEASE_ID" ]; then
          echo "Deleting existing release with ID: $RELEASE_ID"
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
        fi

    - name: Create Release (only on tags)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: LLVM Clang Toolchain ${{ github.ref_name }}
        body: |
          Custom-built LLVM/Clang version ${{ steps.llvm_version.outputs.LLVM_VERSION }}.
          - Supports aarch64 and riscv64.
          - Compatible with Linux kernel 6.6 (including KVM).
          Download clang-toolchain-${{ steps.llvm_version.outputs.LLVM_VERSION }}.tar.gz for use.
        files: llvm-project/install/clang-toolchain-${{ steps.llvm_version.outputs.LLVM_VERSION }}.tar.gz
        draft: false
        prerelease: false
