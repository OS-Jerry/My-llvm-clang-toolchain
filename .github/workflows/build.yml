name: Build LLVM/Clang Toolchain

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]  # 例如 v19.1.6，触发Release

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 可以扩展为多架构runner，但这里用x86_64主机构建cross-toolchain
        include: [{ os: ubuntu-latest }]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        # 安装CMake、Ninja、Python等（LLVM prerequisites）
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build python3 python3-pip git
        sudo apt-get install -y build-essential libstdc++-12-dev  # C++ toolchain
        # 可选：zlib等
        sudo apt-get install -y zlib1g-dev

    - name: Download LLVM source (stable version)
      run: |
        # 指定稳定tag；当前(2025-09)最新稳定是19.1.6，替换为最新如llvmorg-20.0.0
        git clone --depth 1 --branch llvmorg-19.1.6 https://github.com/llvm/llvm-project.git
        cd llvm-project

    - name: Configure LLVM build with CMake
      run: |
        cd llvm-project
        mkdir build
        cd build
        # Release构建，启用Clang、LLD（链接器，支持kernel）、compiler-rt（运行时，支持KVM等）
        # 启用AArch64和RISCV targets（默认支持，但显式指定）
        # 安装到本地prefix，避免sudo
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=../install \
          -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" \
          -DLLVM_TARGETS_TO_BUILD="X86;AArch64;RISCV" \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_USE_LINKER=lld \
          -DLLVM_PARALLEL_LINK_JOBS=1 \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          ../llvm
        # 如果需要更多targets或projects，添加如-DLLVM_ENABLE_PROJECTS+="libcxx"

    - name: Build LLVM/Clang
      run: |
        cd llvm-project/build
        ninja -j$(nproc)  # 并行构建，使用所有CPU核心
        # 构建时间约2-4小时，视runner负载

    - name: Install and package toolchain
      run: |
        cd llvm-project
        cd build
        ninja install  # 安装到install/
        cd ../install
        # 打包bin目录（Clang工具链核心）
        tar -czf clang-toolchain.tar.gz bin/
        # 可选：打包整个install/ 如果需要lib等
        # mv clang-toolchain.tar.gz $GITHUB_WORKSPACE/

    - name: Upload build artifacts (for testing)
      uses: actions/upload-artifact@v4
      with:
        name: clang-toolchain-${{ github.sha }}
        path: llvm-project/install/clang-toolchain.tar.gz
        retention-days: 30  # 供下载测试

    - name: Create Release (only on tags)
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: LLVM Clang Toolchain ${{ github.ref }}
        body: |
          Custom-built LLVM/Clang stable version supporting aarch64 and riscv64.
          - Kernel 6.6 compatible.
          - Includes KVM support via kernel config.
          Download clang-toolchain.tar.gz for use.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: llvm-project/install/clang-toolchain.tar.gz
        asset_name: clang-toolchain-${{ github.ref }}.tar.gz
        asset_content_type: application/gzip
