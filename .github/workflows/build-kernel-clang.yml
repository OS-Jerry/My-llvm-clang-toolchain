name: Build Linux Kernel with LLVM (Absolute Path)

on:
  push:
    tags:
      - 'v*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Linux kernel version/tag to build (default: v6.6)'
        required: false
        default: 'v6.6'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64, riscv]
      fail-fast: false

    steps:
      - name: Checkout Linux kernel
        uses: actions/checkout@v4
        with:
          repository: torvalds/linux
          ref: ${{ github.event.inputs.version || 'v6.6' }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses-dev \
            bison \
            flex \
            libssl-dev \
            bc \
            wget \
            gcc-aarch64-linux-gnu \
            gcc-riscv64-linux-gnu

      - name: Download and setup LLVM toolchain
        run: |
          wget https://github.com/OS-Jerry/My-llvm-clang-toolchain/releases/download/llvmorg-21.1.0/clang-toolchain-llvmorg-21.1.0.tar.gz
          mkdir -p llvm-toolchain
          tar -xzf clang-toolchain-llvmorg-21.1.0.tar.gz -C llvm-toolchain --strip-components=1
          echo "LLVM_BIN=$GITHUB_WORKSPACE/llvm-toolchain/bin" >> $GITHUB_ENV

      - name: Verify LLVM tools
        run: |
          $LLVM_BIN/clang --version
          $LLVM_BIN/ld.lld --version

      - name: Configure Linux kernel for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            make ARCH=arm64 LLVM=1 LLVM_IAS=1 \
                 CC=$LLVM_BIN/clang \
                 LD=$LLVM_BIN/ld.lld defconfig
          else
            make ARCH=riscv LLVM=1 LLVM_IAS=1 \
                 CC=$LLVM_BIN/clang \
                 LD=$LLVM_BIN/ld.lld defconfig
          fi

      - name: Build Linux kernel for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            make -j$(nproc) ARCH=arm64 LLVM=1 LLVM_IAS=1 \
                 CC=$LLVM_BIN/clang \
                 LD=$LLVM_BIN/ld.lld
          else
            make -j$(nproc) ARCH=riscv LLVM=1 LLVM_IAS=1 \
                 CC=$LLVM_BIN/clang \
                 LD=$LLVM_BIN/ld.lld
          fi

      - name: Package kernel artifacts
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            cp arch/arm64/boot/Image artifacts/
            cp .config artifacts/
            cp System.map artifacts/
          else
            cp arch/riscv/boot/Image artifacts/
            cp .config artifacts/
            cp System.map artifacts/
          fi
          tar -czf artifacts/linux-${{ matrix.arch }}-${{ github.event.inputs.version || 'v6.6' }}.tar.gz -C artifacts .

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-kernel-${{ matrix.arch }}-${{ github.event.inputs.version || 'v6.6' }}
          path: artifacts/linux-${{ matrix.arch }}-${{ github.event.inputs.version || 'v6.6' }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version || 'v6.6' }}
          files: release_artifacts/**/*

