name: Build QEMU Toolchain

on:
  push:
    branches: [ main ]
    tags: [ '*' ]  # 匹配任何tag，如v10.1.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl jq build-essential zlib1g-dev libpixman-1-dev
        sudo apt-get install -y pkg-config libspice-server-dev libusb-1.0-0-dev
        sudo apt-get install -y libcap-ng-dev libattr1-dev libbrlapi-dev libepoxy-dev
        sudo apt-get install -y libgtk-3-dev libvte-2.91-dev libjpeg-turbo8-dev libncurses5-dev
        sudo apt-get install -y libaio-dev libfdt-dev liblzo2-dev librdmacm-dev libibverbs-dev
        sudo apt-get install -y libnuma-dev libusbredirparser-dev libvirglrenderer-dev
        sudo apt-get install -y libslirp-dev libbrlapi-dev libcapstone-dev liburing-dev
        sudo apt-get install -y python3 python3-pip python3-venv ninja-build meson checkinstall
        pip3 install sphinx sphinx_rtd_theme

    - name: Determine QEMU version
      id: qemu_version
      run: |
        DEFAULT_VERSION="v10.1.0"
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          TAG_NAME="${{ github.ref_name }}"
          if git ls-remote --tags https://github.com/qemu/qemu.git | grep -q "refs/tags/$TAG_NAME$"; then
            echo "Using QEMU tag: $TAG_NAME"
            echo "QEMU_VERSION=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_NAME not found in QEMU repo, falling back to default: $DEFAULT_VERSION"
            echo "QEMU_VERSION=$DEFAULT_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          LATEST_VERSION=$(git ls-remote --tags https://github.com/qemu/qemu.git | \
                           grep -o 'refs/tags/v[0-9]\+\.[0-9]\+\.[0-9]\+$' | \
                           sort -V | tail -n 1 | sed 's|refs/tags/||')
          echo "Using latest stable QEMU version: $LATEST_VERSION"
          echo "QEMU_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Download QEMU source
      run: |
        git clone --depth 1 --branch ${{ steps.qemu_version.outputs.QEMU_VERSION }} \
          https://github.com/qemu/qemu.git
        cd qemu

    - name: Clean previous build directory (optional but recommended)
      run: |
        rm -rf qemu/build

    - name: Reconfigure QEMU build with meson
      run: |
        cd qemu
        meson setup build --reconfigure

    - name: Build QEMU with ninja
      run: |
        cd qemu/build
        ninja -j$(nproc)

    - name: Install and package QEMU as .deb
      run: |
        cd qemu/build
        sudo meson install
        cd install
        sudo checkinstall --pkgname=qemu --pkgversion=${{ steps.qemu_version.outputs.QEMU_VERSION }} --backup=no --deldoc=yes --default
        sudo mv *.deb /tmp/qemu-deb/

    - name: Upload .deb package
      uses: actions/upload-artifact@v4
      with:
        name: qemu-${{ github.ref_name }}.deb
        path: /tmp/qemu-deb/*.deb

    - name: Install and package QEMU as .tar.gz
      run: |
        cd qemu/build
        sudo meson install
        cd install
        tar -czf qemu-toolchain-${{ github.ref_name }}.tar.gz bin/

    - name: Upload .tar.gz package
      uses: actions/upload-artifact@v4
      with:
        name: qemu-${{ github.ref_name }}.tar.gz
        path: qemu/build/install/qemu-toolchain-${{ github.ref_name }}.tar.gz

    - name: Delete existing release (if tag exists)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_NAME="${{ github.ref_name }}"
        RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases | \
          jq -r ".[] | select(.tag_name == \"$RELEASE_NAME\") | .id")
        if [ ! -z "$RELEASE_ID" ]; then
          echo "Deleting existing release with ID: $RELEASE_ID"
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
        fi

    - name: Create Release (only on tags)
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: QEMU Toolchain ${{ github.ref_name }}
        body: |
          Custom-built QEMU version ${{ steps.qemu_version.outputs.QEMU_VERSION }}.
          - Supports KVM.
          - Supports aarch64 and riscv64 guest architectures.
          Download the .deb package for easy installation or the .tar.gz package for manual installation.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/qemu-deb/*.deb
        asset_name: qemu-${{ github.ref_name }}.deb
        asset_content_type: application/deb

    - name: Upload .tar.gz Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: qemu/build/install/qemu-toolchain-${{ github.ref_name }}.tar.gz
        asset_name: qemu-toolchain-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

