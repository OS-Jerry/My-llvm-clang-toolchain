name: Build and Release QEMU

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]  # Trigger on version tags like v10.1.0
  workflow_dispatch:
    inputs:
      qemu_version:
        description: 'QEMU version to build (e.g., v10.1.0)'
        required: false
        default: 'latest'

env:
  DEFAULT_QEMU_VERSION: "v10.1.0"

jobs:
  build-qemu:
    runs-on: ubuntu-latest
    
    outputs:
      qemu_version: ${{ steps.version.outputs.qemu_version }}
      release_name: ${{ steps.version.outputs.release_name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          ninja-build \
          pkg-config \
          libglib2.0-dev \
          libfdt-dev \
          libpixman-1-dev \
          zlib1g-dev \
          libnfs-dev \
          libiscsi-dev \
          libspice-server-dev \
          libusb-1.0-0-dev \
          libcap-ng-dev \
          libattr1-dev \
          libbrlapi-dev \
          libepoxy-dev \
          libgtk-3-dev \
          libvte-2.91-dev \
          libjpeg-turbo8-dev \
          libncurses-dev \
          libaio-dev \
          liblzo2-dev \
          librdmacm-dev \
          libibverbs-dev \
          libnuma-dev \
          libusbredirparser-dev \
          libvirglrenderer-dev \
          libslirp-dev \
          libcapstone-dev \
          liburing-dev \
          checkinstall \
          jq

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install meson==1.5.0 sphinx sphinx_rtd_theme

    - name: Determine QEMU version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual trigger
          if [[ "${{ github.event.inputs.qemu_version }}" == "latest" ]]; then
            QEMU_VERSION=$(git ls-remote --tags https://github.com/qemu/qemu.git | \
                          grep -o 'refs/tags/v[0-9]\+\.[0-9]\+\.[0-9]\+$' | \
                          sort -V | tail -n 1 | sed 's|refs/tags/||')
            echo "Using latest QEMU version: $QEMU_VERSION"
          else
            QEMU_VERSION="${{ github.event.inputs.qemu_version }}"
            echo "Using manually specified QEMU version: $QEMU_VERSION"
          fi
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          # Tag push
          TAG_NAME="${{ github.ref_name }}"
          if git ls-remote --tags https://github.com/qemu/qemu.git | grep -q "refs/tags/$TAG_NAME$"; then
            QEMU_VERSION="$TAG_NAME"
            echo "Using QEMU tag: $QEMU_VERSION"
          else
            echo "Warning: Tag $TAG_NAME not found in QEMU repo, using default: $DEFAULT_QEMU_VERSION"
            QEMU_VERSION="$DEFAULT_QEMU_VERSION"
          fi
        else
          # Branch push - use latest stable
          QEMU_VERSION=$(git ls-remote --tags https://github.com/qemu/qemu.git | \
                        grep -o 'refs/tags/v[0-9]\+\.[0-9]\+\.[0-9]\+$' | \
                        sort -V | tail -n 1 | sed 's|refs/tags/||')
          echo "Using latest stable QEMU version: $QEMU_VERSION"
        fi
        
        echo "qemu_version=$QEMU_VERSION" >> $GITHUB_OUTPUT
        echo "release_name=qemu-toolchain-$QEMU_VERSION" >> $GITHUB_OUTPUT

    - name: Cache QEMU source
      uses: actions/cache@v3
      id: cache-source
      with:
        path: qemu
        key: qemu-source-${{ steps.version.outputs.qemu_version }}

    - name: Download QEMU source
      if: steps.cache-source.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch ${{ steps.version.outputs.qemu_version }} \
          https://github.com/qemu/qemu.git

    - name: Configure QEMU build
      run: |
        cd qemu
        rm -rf build
        meson setup build \
          --buildtype=release \
          --prefix=/usr/local \
          -Dkvm=enabled \
          -Dgtk=enabled \
          -Dspice=enabled \
          -Dusb_redir=enabled \
          -Dvirtiofsd=enabled \
          -Dtargets=x86_64-softmmu,aarch64-softmmu,riscv64-softmmu,x86_64-linux-user,aarch64-linux-user,riscv64-linux-user

    - name: Build QEMU
      run: |
        cd qemu/build
        ninja -j$(nproc)

    - name: Create installation directory
      run: |
        mkdir -p /tmp/qemu-install

    - name: Install QEMU to temporary directory
      run: |
        cd qemu/build
        DESTDIR=/tmp/qemu-install meson install

    - name: Create .tar.gz package
      run: |
        cd /tmp/qemu-install
        tar -czf /tmp/${{ steps.version.outputs.release_name }}.tar.gz usr/

    - name: Create .deb package
      run: |
        cd qemu/build
        sudo checkinstall \
          --pkgname=qemu-custom \
          --pkgversion="${{ steps.version.outputs.qemu_version }}" \
          --pkgarch=amd64 \
          --pkggroup=emulators \
          --maintainer="GitHub Actions" \
          --summary="Custom built QEMU ${{ steps.version.outputs.qemu_version }}" \
          --description="Custom built QEMU with KVM support and multiple architectures" \
          --backup=no \
          --deldoc=yes \
          --delspec=yes \
          --default \
          --install=no \
          meson install
        
        # Move deb package to temp directory
        sudo mv *.deb /tmp/${{ steps.version.outputs.release_name }}.deb

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qemu-packages-${{ steps.version.outputs.qemu_version }}
        path: |
          /tmp/${{ steps.version.outputs.release_name }}.tar.gz
          /tmp/${{ steps.version.outputs.release_name }}.deb
        retention-days: 30

  release:
    needs: build-qemu
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: qemu-packages-${{ needs.build-qemu.outputs.qemu_version }}
        path: ./packages

    - name: Delete existing release if it exists
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TAG="${{ github.ref_name }}"
        
        # Check if release exists
        RELEASE_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG" | \
          jq -r '.id // empty')
        
        if [ ! -z "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ]; then
          echo "Deleting existing release with ID: $RELEASE_ID"
          curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          echo "Existing release deleted"
        else
          echo "No existing release found for tag $RELEASE_TAG"
        fi

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || needs.build-qemu.outputs.qemu_version }}
        name: "QEMU Toolchain ${{ needs.build-qemu.outputs.qemu_version }}"
        body: |
          # QEMU Toolchain Release ${{ needs.build-qemu.outputs.qemu_version }}
          
          Custom-built QEMU based on upstream version **${{ needs.build-qemu.outputs.qemu_version }}**.
          
          ## Features
          - ✅ KVM acceleration support
          - ✅ Multiple target architectures: x86_64, aarch64, riscv64
          - ✅ Both system and user mode emulation
          - ✅ GTK and Spice display backends
          - ✅ USB redirection support
          - ✅ VirtIO-FS support
          
          ## Installation Options
          
          ### Option 1: Debian Package (.deb)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name || needs.build-qemu.outputs.qemu_version }}/${{ needs.build-qemu.outputs.release_name }}.deb
          sudo dpkg -i ${{ needs.build-qemu.outputs.release_name }}.deb
          sudo apt-get install -f  # Fix any dependency issues
          ```
          
          ### Option 2: Manual Installation (.tar.gz)
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name || needs.build-qemu.outputs.qemu_version }}/${{ needs.build-qemu.outputs.release_name }}.tar.gz
          tar -xzf ${{ needs.build-qemu.outputs.release_name }}.tar.gz
          sudo cp -r usr/* /usr/local/
          sudo ldconfig
          ```
          
          ## Verification
          After installation, verify QEMU is working:
          ```bash
          qemu-system-x86_64 --version
          qemu-system-aarch64 --version
          qemu-system-riscv64 --version
          ```
          
          Built on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        files: |
          ./packages/${{ needs.build-qemu.outputs.release_name }}.tar.gz
          ./packages/${{ needs.build-qemu.outputs.release_name }}.deb
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
