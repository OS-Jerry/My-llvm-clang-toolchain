name: Build Linux Kernel with Custom LLVM

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC 00:00运行一次（约北京时间08:00）

jobs:
  check-and-build-kernel:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl jq build-essential bc bison flex libssl-dev libelf-dev
        # 对于交叉编译kernel的依赖
        sudo apt-get install -y crossbuild-essential-arm64 crossbuild-essential-riscv64
        # 但我们用Clang，所以sysroot从cross工具链获取

    - name: Get latest LLVM release from this repo
      id: get_llvm_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 使用GitHub API获取最新Release（假设LLVM tags以llvmorg-开头）
        LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
        if [[ $LATEST_RELEASE == llvmorg-* ]]; then
          echo "Found latest LLVM release: $LATEST_RELEASE"
          echo "LLVM_TAG=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          # 下载asset：clang-toolchain-<tag>.tar.gz
          ASSET_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_RELEASE | \
            jq -r '.assets[] | select(.name == "clang-toolchain-'$LATEST_RELEASE'.tar.gz") | .id')
          if [ ! -z "$ASSET_ID" ]; then
            curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID \
              -o clang-toolchain.tar.gz
            tar -xzf clang-toolchain.tar.gz
            mv bin clang-toolchain-bin  # 解压到clang-toolchain-bin/
            echo "Downloaded and extracted LLVM toolchain from $LATEST_RELEASE"
          else
            echo "No matching asset found for $LATEST_RELEASE"
            exit 0  # 无asset，跳过
          fi
        else
          echo "No LLVM release found (tag not matching llvmorg-*)"
          exit 0  # 无LLVM Release，跳过构建
        fi

    - name: Download Linux kernel source
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        git clone --depth 1 --branch v6.6 https://github.com/torvalds/linux.git
        cd linux

    - name: Setup LLVM toolchain
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        export PATH=$GITHUB_WORKSPACE/clang-toolchain-bin:$PATH
        clang --version  # 验证

    - name: Build kernel for aarch64
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        cd linux
        make ARCH=arm64 defconfig
        # 默认defconfig；后期可替换为自定义.config
        # 启用KVM如果需要，但defconfig中通常已支持（视arch）
        make ARCH=arm64 CROSS_COMPILE= CC=clang LD=ld.lld \
          -j$(nproc) --target=aarch64-unknown-linux-gnu vmlinux modules
        # 打包：vmlinux, modules等
        mkdir -p ../kernel-aarch64
        cp vmlinux ../kernel-aarch64/
        cp -r arch/arm64/boot/dts ../kernel-aarch64/  # 可选dtb
        find . -name '*.ko' -exec cp {} ../kernel-aarch64/ \;
        cd ..
        tar -czf kernel-${{ steps.get_llvm_release.outputs.LLVM_TAG }}-v6.6-defconfig-aarch64.tar.gz kernel-aarch64/

    - name: Build kernel for riscv64
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        cd linux
        make ARCH=riscv defconfig
        make ARCH=riscv CROSS_COMPILE= CC=clang LD=ld.lld \
          -j$(nproc) --target=riscv64-unknown-linux-gnu vmlinux modules
        mkdir -p ../kernel-riscv64
        cp vmlinux ../kernel-riscv64/
        cp -r arch/riscv/boot/dts ../kernel-riscv64/  # 可选dtb
        find . -name '*.ko' -exec cp {} ../kernel-riscv64/ \;
        cd ..
        tar -czf kernel-${{ steps.get_llvm_release.outputs.LLVM_TAG }}-v6.6-defconfig-riscv64.tar.gz kernel-riscv64/

    - name: Create or update Release for kernel
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LLVM_TAG="${{ steps.get_llvm_release.outputs.LLVM_TAG }}"
        RELEASE_TAG="kernel-$LLVM_TAG-v6.6-defconfig"
        # 检查并删除现有同名Release（支持覆盖）
        RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases | \
          jq -r ".[] | select(.tag_name == \"$RELEASE_TAG\") | .id")
        if [ ! -z "$RELEASE_ID" ]; then
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
        fi
        # 创建新Release
        RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d "{\"tag_name\": \"$RELEASE_TAG\", \"name\": \"Kernel build with $LLVM_TAG\", \"body\": \"Linux kernel v6.6 built with LLVM $LLVM_TAG for aarch64 and riscv64 using defconfig.\"}")
        UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
        # 上传aarch64 asset
        curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" \
          --data-binary "@kernel-$LLVM_TAG-v6.6-defconfig-aarch64.tar.gz" \
          "$UPLOAD_URL?name=kernel-$LLVM_TAG-v6.6-defconfig-aarch64.tar.gz"
        # 上传riscv64 asset
        curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" \
          --data-binary "@kernel-$LLVM_TAG-v6.6-defconfig-riscv64.tar.gz" \
          "$UPLOAD_URL?name=kernel-$LLVM_TAG-v6.6-defconfig-riscv64.tar.gz"
