name: Build Linux Kernel with Custom LLVM

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at UTC 00:00 (Beijing ~08:00)
  push:
    tags: [ '*' ]  # Trigger on any tag push for specific kernel versions

permissions:
  contents: write  # For release creation/deletion

jobs:
  check-and-build-kernel:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl jq build-essential bc bison flex libssl-dev libelf-dev
        sudo apt-get install -y crossbuild-essential-arm64 crossbuild-essential-riscv64
        pip install pyyaml  # For parsing config.yaml

    - name: Determine versions from config.yaml and tag
      id: determine_versions
      run: |
        KERNEL_DEFAULT="v6.6"
        LLVM_TAG=""
        KERNEL_TAG="$KERNEL_DEFAULT"
        
        # Parse config.yaml if exists
        if [ -f config.yaml ]; then
          python3 -c "$(cat <<EOF
import yaml
import sys
try:
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f) or {}
    llvm_tag = config.get('llvm_tag', '')
    kernel_tag = config.get('kernel_tag', '')
    print(f'LLVM_TAG={llvm_tag}')
    print(f'KERNEL_TAG={kernel_tag}')
except Exception as e:
    print(f'Error parsing config.yaml: {e}', file=sys.stderr)
    print('LLVM_TAG=')
    print('KERNEL_TAG=')
EOF
)" >> $GITHUB_OUTPUT
        else
          echo "No config.yaml found, using defaults"
          echo "LLVM_TAG=" >> $GITHUB_OUTPUT
          echo "KERNEL_TAG=$KERNEL_DEFAULT" >> $GITHUB_OUTPUT
        fi
        
        # Override kernel_tag if push tag matches vX.Y pattern
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          TAG_NAME="${{ github.ref_name }}"
          if [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+$ ]]; then
            if git ls-remote --tags https://github.com/torvalds/linux.git | grep -q "refs/tags/$TAG_NAME$"; then
              echo "Using kernel tag from push: $TAG_NAME"
              echo "KERNEL_TAG=$TAG_NAME" >> $GITHUB_OUTPUT
            else
              echo "Tag $TAG_NAME not found in Linux repo, using config or default: ${{ steps.determine_versions.outputs.KERNEL_TAG }}"
            fi
          fi
        fi

    - name: Get LLVM release from this repo
      id: get_llvm_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LLVM_TAG="${{ steps.determine_versions.outputs.LLVM_TAG }}"
        if [ -z "$LLVM_TAG" ]; then
          LLVM_TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          if [[ ! $LLVM_TAG == llvmorg-* ]]; then
            echo "No valid LLVM release found"
            exit 0
          fi
        fi
        echo "Using LLVM tag: $LLVM_TAG"
        echo "LLVM_TAG=$LLVM_TAG" >> $GITHUB_OUTPUT
        
        ASSET_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/$LLVM_TAG | \
          jq -r '.assets[] | select(.name == "clang-toolchain-'$LLVM_TAG'.tar.gz") | .id')
        if [ ! -z "$ASSET_ID" ]; then
          curl -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" \
            https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID \
            -o clang-toolchain.tar.gz
          tar -xzf clang-toolchain.tar.gz
          mv bin clang-toolchain-bin
          echo "Downloaded LLVM toolchain from $LLVM_TAG"
        else
          echo "No matching asset for $LLVM_TAG"
          exit 0
        fi

    - name: Download Linux kernel source
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        KERNEL_TAG="${{ steps.determine_versions.outputs.KERNEL_TAG }}"
        git clone --depth 1 --branch "$KERNEL_TAG" https://github.com/torvalds/linux.git
        if [ $? -ne 0 ]; then
          echo "Failed to clone Linux kernel $KERNEL_TAG"
          exit 1
        fi
        cd linux

    - name: Setup LLVM toolchain
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        export PATH=$GITHUB_WORKSPACE/clang-toolchain-bin:$PATH
        clang --version
        if [ $? -ne 0 ]; then
          echo "Failed to verify Clang toolchain"
          exit 1
        fi

    - name: Build kernel for aarch64
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        cd linux
        make ARCH=arm64 defconfig
        if [ $? -ne 0 ]; then
          echo "Failed to generate aarch64 defconfig"
          exit 1
        fi
        make ARCH=arm64 LLVM=1 -j$(nproc) vmlinux modules
        if [ $? -ne 0 ]; then
          echo "Failed to build aarch64 kernel"
          exit 1
        fi
        mkdir -p ../kernel-aarch64
        cp vmlinux ../kernel-aarch64/
        cp -r arch/arm64/boot/dts ../kernel-aarch64/  # Optional DTBs
        find . -name '*.ko' -exec cp {} ../kernel-aarch64/ \;
        cd ..
        KERNEL_TAG="${{ steps.determine_versions.outputs.KERNEL_TAG }}"
        tar -czf kernel-${{ steps.get_llvm_release.outputs.LLVM_TAG }}-$KERNEL_TAG-defconfig-aarch64.tar.gz kernel-aarch64/

    - name: Build kernel for riscv64
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      run: |
        cd linux
        make ARCH=riscv defconfig
        if [ $? -ne 0 ]; then
          echo "Failed to generate riscv64 defconfig"
          exit 1
        fi
        make ARCH=riscv LLVM=1 -j$(nproc) vmlinux modules
        if [ $? -ne 0 ]; then
          echo "Failed to build riscv64 kernel"
          exit 1
        fi
        mkdir -p ../kernel-riscv64
        cp vmlinux ../kernel-riscv64/
        cp -r arch/riscv/boot/dts ../kernel-riscv64/  # Optional DTBs
        find . -name '*.ko' -exec cp {} ../kernel-riscv64/ \;
        cd ..
        KERNEL_TAG="${{ steps.determine_versions.outputs.KERNEL_TAG }}"
        tar -czf kernel-${{ steps.get_llvm_release.outputs.LLVM_TAG }}-$KERNEL_TAG-defconfig-riscv64.tar.gz kernel-riscv64/

    - name: Create or update Release for kernel
      if: steps.get_llvm_release.outputs.LLVM_TAG != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LLVM_TAG="${{ steps.get_llvm_release.outputs.LLVM_TAG }}"
        KERNEL_TAG="${{ steps.determine_versions.outputs.KERNEL_TAG }}"
        RELEASE_TAG="kernel-$LLVM_TAG-$KERNEL_TAG-defconfig"
        RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases | \
          jq -r ".[] | select(.tag_name == \"$RELEASE_TAG\") | .id")
        if [ ! -z "$RELEASE_ID" ]; then
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
        fi
        RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d "{\"tag_name\": \"$RELEASE_TAG\", \"name\": \"Kernel build with $LLVM_TAG\", \"body\": \"Linux kernel $KERNEL_TAG built with LLVM $LLVM_TAG for aarch64 and riscv64 using defconfig.\"}")
        UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
        curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" \
          --data-binary "@kernel-$LLVM_TAG-$KERNEL_TAG-defconfig-aarch64.tar.gz" \
          "$UPLOAD_URL?name=kernel-$LLVM_TAG-$KERNEL_TAG-defconfig-aarch64.tar.gz"
        curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" \
          --data-binary "@kernel-$LLVM_TAG-$KERNEL_TAG-defconfig-riscv64.tar.gz" \
          "$UPLOAD_URL?name=kernel-$LLVM_TAG-$KERNEL_TAG-defconfig-riscv64.tar.gz"
