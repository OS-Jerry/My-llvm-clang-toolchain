name: Build and Release Busybox for RISC-V

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]  # Trigger on version tags like v1.36.1
  workflow_dispatch:
    inputs:
      busybox_version:
        description: 'Busybox version to build (e.g., 1_36_1)'
        required: false
        default: 'latest'
      riscv_bits:
        description: 'RISC-V architecture bits (32, 64, or both)'
        required: false
        default: 'both'
        type: choice
        options:
        - '32'
        - '64'
        - 'both'

permissions:
  contents: write
  actions: read

env:
  DEFAULT_BUSYBOX_VERSION: "1_36_1"

jobs:
  build-busybox:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [32, 64]
    
    outputs:
      busybox_version: ${{ steps.version.outputs.busybox_version }}
      release_name: ${{ steps.version.outputs.release_name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          curl \
          wget \
          tar \
          xz-utils \
          flex \
          bison \
          libncurses-dev \
          bc \
          libc6-dev-riscv64-cross \
          linux-libc-dev-riscv64-cross

    - name: Setup RISC-V Clang Toolchain
      run: |
        # Download your custom LLVM/Clang toolchain
        TOOLCHAIN_URL="https://github.com/OS-Jerry/My-llvm-clang-toolchain/releases/download/llvmorg-21.1.0/clang-toolchain-llvmorg-21.1.0.tar.gz"
        
        echo "Downloading Clang toolchain from: $TOOLCHAIN_URL"
        wget -q "$TOOLCHAIN_URL" -O clang-toolchain.tar.gz
        
        # Create toolchain directory
        sudo mkdir -p /opt/clang-riscv
        sudo tar -xf clang-toolchain.tar.gz -C /opt/clang-riscv --strip-components=0
        
        # Add to PATH
        echo "/opt/clang-riscv/bin" >> $GITHUB_PATH
        
        # Verify installation
        /opt/clang-riscv/bin/clang --version
        /opt/clang-riscv/bin/clang --print-targets | grep riscv
        
        echo "=== Clang RISC-V Target Support ==="
        /opt/clang-riscv/bin/clang --print-targets | grep -E "(riscv32|riscv64)"

    - name: Determine Busybox version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual trigger
          if [[ "${{ github.event.inputs.busybox_version }}" == "latest" ]]; then
            # Get latest stable version from Busybox git tags
            BUSYBOX_VERSION=$(git ls-remote --tags https://git.busybox.net/busybox | \
                             grep -o 'refs/tags/[0-9_]\+$' | \
                             sort -V | tail -n 1 | sed 's|refs/tags/||')
            echo "Using latest Busybox version: $BUSYBOX_VERSION"
          else
            BUSYBOX_VERSION="${{ github.event.inputs.busybox_version }}"
            echo "Using manually specified Busybox version: $BUSYBOX_VERSION"
          fi
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          # Tag push - convert v1.36.1 to 1_36_1 format
          TAG_NAME="${{ github.ref_name }}"
          BUSYBOX_VERSION=$(echo "$TAG_NAME" | sed 's/^v//' | sed 's/\./_/g')
          echo "Using Busybox version from tag: $BUSYBOX_VERSION"
        else
          # Branch push - use default
          BUSYBOX_VERSION="$DEFAULT_BUSYBOX_VERSION"
          echo "Using default Busybox version: $BUSYBOX_VERSION"
        fi
        
        echo "busybox_version=$BUSYBOX_VERSION" >> $GITHUB_OUTPUT
        echo "release_name=busybox-riscv${{ matrix.arch }}-$BUSYBOX_VERSION" >> $GITHUB_OUTPUT

    - name: Cache Busybox source
      uses: actions/cache@v3
      id: cache-source
      with:
        path: busybox
        key: busybox-source-${{ steps.version.outputs.busybox_version }}

    - name: Download Busybox source
      if: steps.cache-source.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch ${{ steps.version.outputs.busybox_version }} \
          https://git.busybox.net/busybox

    - name: Configure Busybox
      run: |
        cd busybox
        
        # Clean any previous build
        make clean || true
        
        # Set up Clang cross-compilation environment
        export CC="/opt/clang-riscv/bin/clang"
        export CXX="/opt/clang-riscv/bin/clang++"
        export AR="/opt/clang-riscv/bin/llvm-ar"
        export NM="/opt/clang-riscv/bin/llvm-nm"
        export STRIP="/opt/clang-riscv/bin/llvm-strip"
        export OBJCOPY="/opt/clang-riscv/bin/llvm-objcopy"
        export OBJDUMP="/opt/clang-riscv/bin/llvm-objdump"
        export RANLIB="/opt/clang-riscv/bin/llvm-ranlib"
        
        # Set target triple for RISC-V
        if [ "${{ matrix.arch }}" = "32" ]; then
          export TARGET_TRIPLE="riscv32-unknown-linux-gnu"
        else
          export TARGET_TRIPLE="riscv64-unknown-linux-gnu"
        fi
        
        # Configure with Clang
        make ARCH=riscv \
             CROSS_COMPILE="/opt/clang-riscv/bin/llvm-" \
             CC="$CC --target=$TARGET_TRIPLE" \
             defconfig
        
        # Show configuration
        echo "=== Busybox Configuration ==="
        make ARCH=riscv \
             CROSS_COMPILE="/opt/clang-riscv/bin/llvm-" \
             CC="$CC --target=$TARGET_TRIPLE" \
             kernelversion

    - name: Build Busybox
      run: |
        cd busybox
        
        # Set up Clang cross-compilation environment
        export CC="/opt/clang-riscv/bin/clang"
        export CXX="/opt/clang-riscv/bin/clang++"
        export AR="/opt/clang-riscv/bin/llvm-ar"
        export NM="/opt/clang-riscv/bin/llvm-nm"
        export STRIP="/opt/clang-riscv/bin/llvm-strip"
        export OBJCOPY="/opt/clang-riscv/bin/llvm-objcopy"
        export OBJDUMP="/opt/clang-riscv/bin/llvm-objdump"
        export RANLIB="/opt/clang-riscv/bin/llvm-ranlib"
        
        # Set target triple for RISC-V
        if [ "${{ matrix.arch }}" = "32" ]; then
          export TARGET_TRIPLE="riscv32-unknown-linux-gnu"
        else
          export TARGET_TRIPLE="riscv64-unknown-linux-gnu"
        fi
        
        # Build Busybox with Clang
        make ARCH=riscv \
             CROSS_COMPILE="/opt/clang-riscv/bin/llvm-" \
             CC="$CC --target=$TARGET_TRIPLE" \
             -j$(nproc)
        
        # Verify the binary
        echo "=== Build Results ==="
        ls -la busybox
        file busybox
        
        # Check if it's the right architecture using LLVM tools
        /opt/clang-riscv/bin/llvm-objdump -f busybox | head -10

    - name: Create installation package
      run: |
        mkdir -p /tmp/busybox-package
        cd busybox
        
        # Copy busybox binary
        cp busybox /tmp/busybox-package/
        
        # Create symlinks for common commands (like busybox normally does)
        cd /tmp/busybox-package
        ./busybox --list | while read cmd; do
          if [ "$cmd" != "busybox" ]; then
            ln -sf busybox "$cmd" 2>/dev/null || true
          fi
        done
        
        # Create info file
        cat > README.txt << EOF
        Busybox ${{ steps.version.outputs.busybox_version }} for RISC-V ${{ matrix.arch }}-bit
        
        Built on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Target: riscv${{ matrix.arch }}-unknown-linux-gnu  
        Toolchain: LLVM/Clang 21.1.0 (Custom Build)
        Compiler: clang --target=riscv${{ matrix.arch }}-unknown-linux-gnu
        
        Usage:
        1. Copy busybox to your target system
        2. Create symlinks: ./busybox --install -s .
        3. Or run commands directly: ./busybox ls, ./busybox sh, etc.
        
        Available commands:
        EOF
        ./busybox --list >> README.txt
        
        # Create tar.gz package
        cd /tmp
        tar -czf ${{ steps.version.outputs.release_name }}.tar.gz -C busybox-package .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.release_name }}
        path: |
          /tmp/${{ steps.version.outputs.release_name }}.tar.gz
        retention-days: 30

  release:
    needs: build-busybox
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./packages

    - name: Prepare release assets
      run: |
        echo "=== Available packages ==="
        find ./packages -name "*.tar.gz" -type f
        
        # Move all packages to a single directory
        mkdir -p ./release-assets
        find ./packages -name "*.tar.gz" -type f -exec cp {} ./release-assets/ \;
        
        echo "=== Release assets ==="
        ls -la ./release-assets/

    - name: Delete existing release if it exists
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TAG="${{ github.ref_name }}"
        
        # Check if release exists
        RELEASE_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG" | \
          jq -r '.id // empty')
        
        if [ ! -z "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ]; then
          echo "Deleting existing release with ID: $RELEASE_ID"
          curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          echo "Existing release deleted"
        else
          echo "No existing release found for tag $RELEASE_TAG"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || needs.build-busybox.outputs.busybox_version }}
        name: "Busybox ${{ needs.build-busybox.outputs.busybox_version }} for RISC-V"
        body: |
          # Busybox Release ${{ needs.build-busybox.outputs.busybox_version }} for RISC-V
          
          Cross-compiled Busybox based on upstream version **${{ needs.build-busybox.outputs.busybox_version }}**.
          
          ## Features
          - ✅ RISC-V 32-bit and 64-bit architectures
          - ✅ Static linked for portability
          - ✅ Full set of Unix utilities in a single binary
          - ✅ Default configuration with most common tools
          
          ## Architecture Support
          - **riscv32**: 32-bit RISC-V systems
          - **riscv64**: 64-bit RISC-V systems
          
          ## Usage
          
          ### Download and Extract
          ```bash
          # For RISC-V 64-bit
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name || needs.build-busybox.outputs.busybox_version }}/busybox-riscv64-${{ needs.build-busybox.outputs.busybox_version }}.tar.gz
          tar -xzf busybox-riscv64-${{ needs.build-busybox.outputs.busybox_version }}.tar.gz
          
          # For RISC-V 32-bit
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name || needs.build-busybox.outputs.busybox_version }}/busybox-riscv32-${{ needs.build-busybox.outputs.busybox_version }}.tar.gz
          tar -xzf busybox-riscv32-${{ needs.build-busybox.outputs.busybox_version }}.tar.gz
          ```
          
          ### Installation Options
          
          #### Option 1: Install Symlinks
          ```bash
          # This creates symlinks for all available commands
          ./busybox --install -s .
          ./ls  # Now you can use individual commands
          ./sh  # Busybox shell
          ```
          
          #### Option 2: Direct Usage
          ```bash
          ./busybox ls     # List files
          ./busybox sh     # Start shell
          ./busybox cat /etc/hostname
          ./busybox --help # Show help
          ```
          
          ### QEMU Usage Example
          Perfect for use with QEMU RISC-V emulation:
          ```bash
          # Copy to your RISC-V root filesystem
          cp busybox /path/to/riscv/rootfs/bin/
          
          # In QEMU RISC-V system
          /bin/busybox --install -s /bin
          ```
          
          ## Available Commands
          Run `./busybox --list` to see all available commands (typically 300+ utilities).
          
          Built on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          Toolchain: LLVM/Clang 21.1.0 (Custom Build)
        files: ./release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
